{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoItem.tsx","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","setTodo","todo","type","payload","removeTodo","currentTodoReducer","state","action","status","query","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","mapDispatch","currentTodoActions","connector","connect","props","completed","title","id","dispatch","useDispatch","className","classNames","onClick","visibleTodos","toLowerCase","includes","getFilteredTodos","length","map","useAppSelector","useSelector","TodoFilter","onSubmit","event","preventDefault","value","onChange","convertValueToStatus","target","filterActions","placeholder","e","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","json","Error","todoActions","useState","userDetails","setUserDetails","error","setError","useEffect","fetchUser","a","userId","userFromServer","catch","href","email","name","App","fetchFailed","setFecthFailed","selectedTodo","fetchTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec9a2436.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = { type: 'filterStatus/SET', payload: Status };\ntype SetQueryAction = { type: 'filterQuery/SET', payload: string };\ntype ClearQueryAction = { type: 'filterQuery/CLEAR' };\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filterStatus/SET',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filterQuery/SET',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filterQuery/CLEAR',\n});\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\ntype Action = SetStatusAction | SetQueryAction | ClearQueryAction;\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'filterStatus/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case 'filterQuery/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filterQuery/CLEAR':\n      return {\n        ...state,\n        query: '',\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos.SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos.SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (state: State = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos.SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { RootState } from '../../app/store';\n\nconst mapState = (state: RootState) => {\n  const { currentTodo } = state;\n\n  return {\n    currentTodo,\n  };\n};\n\nconst mapDispatch = {\n  setTodo: currentTodoActions.setTodo,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector> & Todo;\n\nconst TodoItem: React.FC<Props> = (props) => {\n  const {\n    completed,\n    title,\n    id,\n    currentTodo,\n    setTodo,\n  } = props;\n  const dispatch = useDispatch();\n\n  const handleShowDetails = () => {\n    dispatch(setTodo({ ...props }));\n  };\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames(\n            { 'has-text-success': completed },\n            { 'has-text-danger': !completed },\n          )}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            handleShowDetails();\n          }}\n        >\n          <span className=\"icon\">\n            {currentTodo?.id === id ? (\n              <i className=\"far fa-eye-slash\" />\n            ) : (\n              <i className=\"far fa-eye\" />\n            )}\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default connector(TodoItem);\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport TodoItem from './TodoItem';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nconst mapState = ({ todos, filter }: RootState) => {\n  return {\n    todos,\n    filter,\n  };\n};\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst getFilteredTodos = (todos: Todo[], status: Status, query: string): Todo[] => {\n  return todos.filter((todo) => {\n    switch (status) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  }).filter((todo) => {\n    if (query === '') {\n      return true;\n    }\n\n    return todo.title.toLowerCase().includes(query.toLowerCase());\n  });\n};\n\nconst TodoList: React.FC<Props> = ({ todos, filter }) => {\n  const visibleTodos = getFilteredTodos(todos, filter.status, filter.query);\n\n  return (\n    <>\n      {visibleTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map((todo) => (\n            <TodoItem\n              key={todo.id}\n              {...todo}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default connector(TodoList);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nconst convertValueToStatus = (value: string): Status => {\n  switch (value) {\n    case 'completed':\n    case 'active':\n      return value;\n    default:\n      return 'all';\n  }\n};\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => {\n              const value = convertValueToStatus(event.target.value);\n\n              dispatch(filterActions.setStatus(value));\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => {\n            dispatch(filterActions.setQuery(e.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                dispatch(filterActions.clearQuery());\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error('Failed fetching');\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { User } from '../../types/User';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\nconst mapState = (state: RootState) => {\n  const todo = state.currentTodo;\n\n  return {\n    todo,\n  };\n};\n\nconst mapDispatch = {\n  removeTodo: todoActions.removeTodo,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst TodoModal: React.FC<Props> = ({\n  todo,\n  removeTodo,\n}) => {\n  const dispatch = useDispatch();\n  const [userDetails, setUserDetails] = useState<User | null>(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!todo) {\n      return;\n    }\n\n    const fetchUser = async () => {\n      const userFromServer = await getUser(todo.userId);\n\n      setUserDetails(userFromServer);\n    };\n\n    fetchUser()\n      .catch(() => setError('Something went wrong'));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!userDetails ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              {!error && (\n                <a href={`mailto:${userDetails.email}`}>\n                  {userDetails.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default connector(TodoModal);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport TodoList from './components/TodoList/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport TodoModal from './components/TodoModal/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [fetchFailed, setFecthFailed] = useState(false);\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    };\n\n    fetchTodos()\n      .catch(() => setFecthFailed(true));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 ? (<Loader />) : (<TodoList />)}\n              {fetchFailed && 'Something went wrong'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}